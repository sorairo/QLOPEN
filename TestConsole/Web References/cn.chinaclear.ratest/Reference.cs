//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.296 版自动生成。
// 
#pragma warning disable 1591

namespace TestConsole.cn.chinaclear.ratest {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceInterfaceHttpBinding", Namespace="http://webservice.infosec.com.cn")]
    public partial class WebServiceInterface : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback perCertRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback operatorCertRevokeOperationCompleted;
        
        private System.Threading.SendOrPostCallback entCertReplaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback operatorCertFreezeOperationCompleted;
        
        private System.Threading.SendOrPostCallback entCertRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback operatorCertUpdateAndDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback entCertUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback operatorCertRequestAndDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback operatorCertUnfreezeOperationCompleted;
        
        private System.Threading.SendOrPostCallback entCertFreezeOperationCompleted;
        
        private System.Threading.SendOrPostCallback perCertUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback perCertUpdateAndDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback operatorCertQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback entCertReplaceAndDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback perCertReplaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback entCertRequestAndDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback perCertUnfreezeOperationCompleted;
        
        private System.Threading.SendOrPostCallback operatorCertUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback perCertFreezeOperationCompleted;
        
        private System.Threading.SendOrPostCallback perCertReplaceAndDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback operatorCertReplaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback operatorCertReplaceAndDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback entCertRevokeOperationCompleted;
        
        private System.Threading.SendOrPostCallback operatorCertRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback entCertUpdateAndDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback perCertQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback entCertUnfreezeOperationCompleted;
        
        private System.Threading.SendOrPostCallback perCertRequestAndDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback entCertQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback perCertRevokeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebServiceInterface() {
            this.Url = global::TestConsole.Properties.Settings.Default.TestConsole_cn_chinaclear_ratest_WebServiceInterface;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event perCertRequestCompletedEventHandler perCertRequestCompleted;
        
        /// <remarks/>
        public event operatorCertRevokeCompletedEventHandler operatorCertRevokeCompleted;
        
        /// <remarks/>
        public event entCertReplaceCompletedEventHandler entCertReplaceCompleted;
        
        /// <remarks/>
        public event operatorCertFreezeCompletedEventHandler operatorCertFreezeCompleted;
        
        /// <remarks/>
        public event entCertRequestCompletedEventHandler entCertRequestCompleted;
        
        /// <remarks/>
        public event operatorCertUpdateAndDownCompletedEventHandler operatorCertUpdateAndDownCompleted;
        
        /// <remarks/>
        public event entCertUpdateCompletedEventHandler entCertUpdateCompleted;
        
        /// <remarks/>
        public event operatorCertRequestAndDownCompletedEventHandler operatorCertRequestAndDownCompleted;
        
        /// <remarks/>
        public event operatorCertUnfreezeCompletedEventHandler operatorCertUnfreezeCompleted;
        
        /// <remarks/>
        public event entCertFreezeCompletedEventHandler entCertFreezeCompleted;
        
        /// <remarks/>
        public event perCertUpdateCompletedEventHandler perCertUpdateCompleted;
        
        /// <remarks/>
        public event perCertUpdateAndDownCompletedEventHandler perCertUpdateAndDownCompleted;
        
        /// <remarks/>
        public event operatorCertQueryCompletedEventHandler operatorCertQueryCompleted;
        
        /// <remarks/>
        public event entCertReplaceAndDownCompletedEventHandler entCertReplaceAndDownCompleted;
        
        /// <remarks/>
        public event perCertReplaceCompletedEventHandler perCertReplaceCompleted;
        
        /// <remarks/>
        public event entCertRequestAndDownCompletedEventHandler entCertRequestAndDownCompleted;
        
        /// <remarks/>
        public event perCertUnfreezeCompletedEventHandler perCertUnfreezeCompleted;
        
        /// <remarks/>
        public event operatorCertUpdateCompletedEventHandler operatorCertUpdateCompleted;
        
        /// <remarks/>
        public event perCertFreezeCompletedEventHandler perCertFreezeCompleted;
        
        /// <remarks/>
        public event perCertReplaceAndDownCompletedEventHandler perCertReplaceAndDownCompleted;
        
        /// <remarks/>
        public event operatorCertReplaceCompletedEventHandler operatorCertReplaceCompleted;
        
        /// <remarks/>
        public event operatorCertReplaceAndDownCompletedEventHandler operatorCertReplaceAndDownCompleted;
        
        /// <remarks/>
        public event downloadCertCompletedEventHandler downloadCertCompleted;
        
        /// <remarks/>
        public event entCertRevokeCompletedEventHandler entCertRevokeCompleted;
        
        /// <remarks/>
        public event operatorCertRequestCompletedEventHandler operatorCertRequestCompleted;
        
        /// <remarks/>
        public event entCertUpdateAndDownCompletedEventHandler entCertUpdateAndDownCompleted;
        
        /// <remarks/>
        public event perCertQueryCompletedEventHandler perCertQueryCompleted;
        
        /// <remarks/>
        public event entCertUnfreezeCompletedEventHandler entCertUnfreezeCompleted;
        
        /// <remarks/>
        public event perCertRequestAndDownCompletedEventHandler perCertRequestAndDownCompleted;
        
        /// <remarks/>
        public event entCertQueryCompletedEventHandler entCertQueryCompleted;
        
        /// <remarks/>
        public event perCertRevokeCompletedEventHandler perCertRevokeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string perCertRequest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("perCertRequest", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void perCertRequestAsync(string in0) {
            this.perCertRequestAsync(in0, null);
        }
        
        /// <remarks/>
        public void perCertRequestAsync(string in0, object userState) {
            if ((this.perCertRequestOperationCompleted == null)) {
                this.perCertRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnperCertRequestOperationCompleted);
            }
            this.InvokeAsync("perCertRequest", new object[] {
                        in0}, this.perCertRequestOperationCompleted, userState);
        }
        
        private void OnperCertRequestOperationCompleted(object arg) {
            if ((this.perCertRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.perCertRequestCompleted(this, new perCertRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string operatorCertRevoke([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("operatorCertRevoke", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void operatorCertRevokeAsync(string in0) {
            this.operatorCertRevokeAsync(in0, null);
        }
        
        /// <remarks/>
        public void operatorCertRevokeAsync(string in0, object userState) {
            if ((this.operatorCertRevokeOperationCompleted == null)) {
                this.operatorCertRevokeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnoperatorCertRevokeOperationCompleted);
            }
            this.InvokeAsync("operatorCertRevoke", new object[] {
                        in0}, this.operatorCertRevokeOperationCompleted, userState);
        }
        
        private void OnoperatorCertRevokeOperationCompleted(object arg) {
            if ((this.operatorCertRevokeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.operatorCertRevokeCompleted(this, new operatorCertRevokeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string entCertReplace([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("entCertReplace", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entCertReplaceAsync(string in0) {
            this.entCertReplaceAsync(in0, null);
        }
        
        /// <remarks/>
        public void entCertReplaceAsync(string in0, object userState) {
            if ((this.entCertReplaceOperationCompleted == null)) {
                this.entCertReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentCertReplaceOperationCompleted);
            }
            this.InvokeAsync("entCertReplace", new object[] {
                        in0}, this.entCertReplaceOperationCompleted, userState);
        }
        
        private void OnentCertReplaceOperationCompleted(object arg) {
            if ((this.entCertReplaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entCertReplaceCompleted(this, new entCertReplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string operatorCertFreeze([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("operatorCertFreeze", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void operatorCertFreezeAsync(string in0) {
            this.operatorCertFreezeAsync(in0, null);
        }
        
        /// <remarks/>
        public void operatorCertFreezeAsync(string in0, object userState) {
            if ((this.operatorCertFreezeOperationCompleted == null)) {
                this.operatorCertFreezeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnoperatorCertFreezeOperationCompleted);
            }
            this.InvokeAsync("operatorCertFreeze", new object[] {
                        in0}, this.operatorCertFreezeOperationCompleted, userState);
        }
        
        private void OnoperatorCertFreezeOperationCompleted(object arg) {
            if ((this.operatorCertFreezeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.operatorCertFreezeCompleted(this, new operatorCertFreezeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string entCertRequest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("entCertRequest", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entCertRequestAsync(string in0) {
            this.entCertRequestAsync(in0, null);
        }
        
        /// <remarks/>
        public void entCertRequestAsync(string in0, object userState) {
            if ((this.entCertRequestOperationCompleted == null)) {
                this.entCertRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentCertRequestOperationCompleted);
            }
            this.InvokeAsync("entCertRequest", new object[] {
                        in0}, this.entCertRequestOperationCompleted, userState);
        }
        
        private void OnentCertRequestOperationCompleted(object arg) {
            if ((this.entCertRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entCertRequestCompleted(this, new entCertRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string operatorCertUpdateAndDown([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("operatorCertUpdateAndDown", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void operatorCertUpdateAndDownAsync(string in0) {
            this.operatorCertUpdateAndDownAsync(in0, null);
        }
        
        /// <remarks/>
        public void operatorCertUpdateAndDownAsync(string in0, object userState) {
            if ((this.operatorCertUpdateAndDownOperationCompleted == null)) {
                this.operatorCertUpdateAndDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnoperatorCertUpdateAndDownOperationCompleted);
            }
            this.InvokeAsync("operatorCertUpdateAndDown", new object[] {
                        in0}, this.operatorCertUpdateAndDownOperationCompleted, userState);
        }
        
        private void OnoperatorCertUpdateAndDownOperationCompleted(object arg) {
            if ((this.operatorCertUpdateAndDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.operatorCertUpdateAndDownCompleted(this, new operatorCertUpdateAndDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string entCertUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("entCertUpdate", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entCertUpdateAsync(string in0) {
            this.entCertUpdateAsync(in0, null);
        }
        
        /// <remarks/>
        public void entCertUpdateAsync(string in0, object userState) {
            if ((this.entCertUpdateOperationCompleted == null)) {
                this.entCertUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentCertUpdateOperationCompleted);
            }
            this.InvokeAsync("entCertUpdate", new object[] {
                        in0}, this.entCertUpdateOperationCompleted, userState);
        }
        
        private void OnentCertUpdateOperationCompleted(object arg) {
            if ((this.entCertUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entCertUpdateCompleted(this, new entCertUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string operatorCertRequestAndDown([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("operatorCertRequestAndDown", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void operatorCertRequestAndDownAsync(string in0) {
            this.operatorCertRequestAndDownAsync(in0, null);
        }
        
        /// <remarks/>
        public void operatorCertRequestAndDownAsync(string in0, object userState) {
            if ((this.operatorCertRequestAndDownOperationCompleted == null)) {
                this.operatorCertRequestAndDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnoperatorCertRequestAndDownOperationCompleted);
            }
            this.InvokeAsync("operatorCertRequestAndDown", new object[] {
                        in0}, this.operatorCertRequestAndDownOperationCompleted, userState);
        }
        
        private void OnoperatorCertRequestAndDownOperationCompleted(object arg) {
            if ((this.operatorCertRequestAndDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.operatorCertRequestAndDownCompleted(this, new operatorCertRequestAndDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string operatorCertUnfreeze([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("operatorCertUnfreeze", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void operatorCertUnfreezeAsync(string in0) {
            this.operatorCertUnfreezeAsync(in0, null);
        }
        
        /// <remarks/>
        public void operatorCertUnfreezeAsync(string in0, object userState) {
            if ((this.operatorCertUnfreezeOperationCompleted == null)) {
                this.operatorCertUnfreezeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnoperatorCertUnfreezeOperationCompleted);
            }
            this.InvokeAsync("operatorCertUnfreeze", new object[] {
                        in0}, this.operatorCertUnfreezeOperationCompleted, userState);
        }
        
        private void OnoperatorCertUnfreezeOperationCompleted(object arg) {
            if ((this.operatorCertUnfreezeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.operatorCertUnfreezeCompleted(this, new operatorCertUnfreezeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string entCertFreeze([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("entCertFreeze", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entCertFreezeAsync(string in0) {
            this.entCertFreezeAsync(in0, null);
        }
        
        /// <remarks/>
        public void entCertFreezeAsync(string in0, object userState) {
            if ((this.entCertFreezeOperationCompleted == null)) {
                this.entCertFreezeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentCertFreezeOperationCompleted);
            }
            this.InvokeAsync("entCertFreeze", new object[] {
                        in0}, this.entCertFreezeOperationCompleted, userState);
        }
        
        private void OnentCertFreezeOperationCompleted(object arg) {
            if ((this.entCertFreezeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entCertFreezeCompleted(this, new entCertFreezeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string perCertUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("perCertUpdate", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void perCertUpdateAsync(string in0) {
            this.perCertUpdateAsync(in0, null);
        }
        
        /// <remarks/>
        public void perCertUpdateAsync(string in0, object userState) {
            if ((this.perCertUpdateOperationCompleted == null)) {
                this.perCertUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnperCertUpdateOperationCompleted);
            }
            this.InvokeAsync("perCertUpdate", new object[] {
                        in0}, this.perCertUpdateOperationCompleted, userState);
        }
        
        private void OnperCertUpdateOperationCompleted(object arg) {
            if ((this.perCertUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.perCertUpdateCompleted(this, new perCertUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string perCertUpdateAndDown([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("perCertUpdateAndDown", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void perCertUpdateAndDownAsync(string in0) {
            this.perCertUpdateAndDownAsync(in0, null);
        }
        
        /// <remarks/>
        public void perCertUpdateAndDownAsync(string in0, object userState) {
            if ((this.perCertUpdateAndDownOperationCompleted == null)) {
                this.perCertUpdateAndDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnperCertUpdateAndDownOperationCompleted);
            }
            this.InvokeAsync("perCertUpdateAndDown", new object[] {
                        in0}, this.perCertUpdateAndDownOperationCompleted, userState);
        }
        
        private void OnperCertUpdateAndDownOperationCompleted(object arg) {
            if ((this.perCertUpdateAndDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.perCertUpdateAndDownCompleted(this, new perCertUpdateAndDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string operatorCertQuery([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("operatorCertQuery", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void operatorCertQueryAsync(string in0) {
            this.operatorCertQueryAsync(in0, null);
        }
        
        /// <remarks/>
        public void operatorCertQueryAsync(string in0, object userState) {
            if ((this.operatorCertQueryOperationCompleted == null)) {
                this.operatorCertQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnoperatorCertQueryOperationCompleted);
            }
            this.InvokeAsync("operatorCertQuery", new object[] {
                        in0}, this.operatorCertQueryOperationCompleted, userState);
        }
        
        private void OnoperatorCertQueryOperationCompleted(object arg) {
            if ((this.operatorCertQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.operatorCertQueryCompleted(this, new operatorCertQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string entCertReplaceAndDown([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("entCertReplaceAndDown", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entCertReplaceAndDownAsync(string in0) {
            this.entCertReplaceAndDownAsync(in0, null);
        }
        
        /// <remarks/>
        public void entCertReplaceAndDownAsync(string in0, object userState) {
            if ((this.entCertReplaceAndDownOperationCompleted == null)) {
                this.entCertReplaceAndDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentCertReplaceAndDownOperationCompleted);
            }
            this.InvokeAsync("entCertReplaceAndDown", new object[] {
                        in0}, this.entCertReplaceAndDownOperationCompleted, userState);
        }
        
        private void OnentCertReplaceAndDownOperationCompleted(object arg) {
            if ((this.entCertReplaceAndDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entCertReplaceAndDownCompleted(this, new entCertReplaceAndDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string perCertReplace([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("perCertReplace", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void perCertReplaceAsync(string in0) {
            this.perCertReplaceAsync(in0, null);
        }
        
        /// <remarks/>
        public void perCertReplaceAsync(string in0, object userState) {
            if ((this.perCertReplaceOperationCompleted == null)) {
                this.perCertReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnperCertReplaceOperationCompleted);
            }
            this.InvokeAsync("perCertReplace", new object[] {
                        in0}, this.perCertReplaceOperationCompleted, userState);
        }
        
        private void OnperCertReplaceOperationCompleted(object arg) {
            if ((this.perCertReplaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.perCertReplaceCompleted(this, new perCertReplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string entCertRequestAndDown([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("entCertRequestAndDown", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entCertRequestAndDownAsync(string in0) {
            this.entCertRequestAndDownAsync(in0, null);
        }
        
        /// <remarks/>
        public void entCertRequestAndDownAsync(string in0, object userState) {
            if ((this.entCertRequestAndDownOperationCompleted == null)) {
                this.entCertRequestAndDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentCertRequestAndDownOperationCompleted);
            }
            this.InvokeAsync("entCertRequestAndDown", new object[] {
                        in0}, this.entCertRequestAndDownOperationCompleted, userState);
        }
        
        private void OnentCertRequestAndDownOperationCompleted(object arg) {
            if ((this.entCertRequestAndDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entCertRequestAndDownCompleted(this, new entCertRequestAndDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string perCertUnfreeze([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("perCertUnfreeze", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void perCertUnfreezeAsync(string in0) {
            this.perCertUnfreezeAsync(in0, null);
        }
        
        /// <remarks/>
        public void perCertUnfreezeAsync(string in0, object userState) {
            if ((this.perCertUnfreezeOperationCompleted == null)) {
                this.perCertUnfreezeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnperCertUnfreezeOperationCompleted);
            }
            this.InvokeAsync("perCertUnfreeze", new object[] {
                        in0}, this.perCertUnfreezeOperationCompleted, userState);
        }
        
        private void OnperCertUnfreezeOperationCompleted(object arg) {
            if ((this.perCertUnfreezeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.perCertUnfreezeCompleted(this, new perCertUnfreezeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string operatorCertUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("operatorCertUpdate", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void operatorCertUpdateAsync(string in0) {
            this.operatorCertUpdateAsync(in0, null);
        }
        
        /// <remarks/>
        public void operatorCertUpdateAsync(string in0, object userState) {
            if ((this.operatorCertUpdateOperationCompleted == null)) {
                this.operatorCertUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnoperatorCertUpdateOperationCompleted);
            }
            this.InvokeAsync("operatorCertUpdate", new object[] {
                        in0}, this.operatorCertUpdateOperationCompleted, userState);
        }
        
        private void OnoperatorCertUpdateOperationCompleted(object arg) {
            if ((this.operatorCertUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.operatorCertUpdateCompleted(this, new operatorCertUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string perCertFreeze([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("perCertFreeze", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void perCertFreezeAsync(string in0) {
            this.perCertFreezeAsync(in0, null);
        }
        
        /// <remarks/>
        public void perCertFreezeAsync(string in0, object userState) {
            if ((this.perCertFreezeOperationCompleted == null)) {
                this.perCertFreezeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnperCertFreezeOperationCompleted);
            }
            this.InvokeAsync("perCertFreeze", new object[] {
                        in0}, this.perCertFreezeOperationCompleted, userState);
        }
        
        private void OnperCertFreezeOperationCompleted(object arg) {
            if ((this.perCertFreezeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.perCertFreezeCompleted(this, new perCertFreezeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string perCertReplaceAndDown([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("perCertReplaceAndDown", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void perCertReplaceAndDownAsync(string in0) {
            this.perCertReplaceAndDownAsync(in0, null);
        }
        
        /// <remarks/>
        public void perCertReplaceAndDownAsync(string in0, object userState) {
            if ((this.perCertReplaceAndDownOperationCompleted == null)) {
                this.perCertReplaceAndDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnperCertReplaceAndDownOperationCompleted);
            }
            this.InvokeAsync("perCertReplaceAndDown", new object[] {
                        in0}, this.perCertReplaceAndDownOperationCompleted, userState);
        }
        
        private void OnperCertReplaceAndDownOperationCompleted(object arg) {
            if ((this.perCertReplaceAndDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.perCertReplaceAndDownCompleted(this, new perCertReplaceAndDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string operatorCertReplace([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("operatorCertReplace", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void operatorCertReplaceAsync(string in0) {
            this.operatorCertReplaceAsync(in0, null);
        }
        
        /// <remarks/>
        public void operatorCertReplaceAsync(string in0, object userState) {
            if ((this.operatorCertReplaceOperationCompleted == null)) {
                this.operatorCertReplaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnoperatorCertReplaceOperationCompleted);
            }
            this.InvokeAsync("operatorCertReplace", new object[] {
                        in0}, this.operatorCertReplaceOperationCompleted, userState);
        }
        
        private void OnoperatorCertReplaceOperationCompleted(object arg) {
            if ((this.operatorCertReplaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.operatorCertReplaceCompleted(this, new operatorCertReplaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string operatorCertReplaceAndDown([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("operatorCertReplaceAndDown", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void operatorCertReplaceAndDownAsync(string in0) {
            this.operatorCertReplaceAndDownAsync(in0, null);
        }
        
        /// <remarks/>
        public void operatorCertReplaceAndDownAsync(string in0, object userState) {
            if ((this.operatorCertReplaceAndDownOperationCompleted == null)) {
                this.operatorCertReplaceAndDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnoperatorCertReplaceAndDownOperationCompleted);
            }
            this.InvokeAsync("operatorCertReplaceAndDown", new object[] {
                        in0}, this.operatorCertReplaceAndDownOperationCompleted, userState);
        }
        
        private void OnoperatorCertReplaceAndDownOperationCompleted(object arg) {
            if ((this.operatorCertReplaceAndDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.operatorCertReplaceAndDownCompleted(this, new operatorCertReplaceAndDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string downloadCert([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("downloadCert", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downloadCertAsync(string in0) {
            this.downloadCertAsync(in0, null);
        }
        
        /// <remarks/>
        public void downloadCertAsync(string in0, object userState) {
            if ((this.downloadCertOperationCompleted == null)) {
                this.downloadCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadCertOperationCompleted);
            }
            this.InvokeAsync("downloadCert", new object[] {
                        in0}, this.downloadCertOperationCompleted, userState);
        }
        
        private void OndownloadCertOperationCompleted(object arg) {
            if ((this.downloadCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadCertCompleted(this, new downloadCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string entCertRevoke([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("entCertRevoke", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entCertRevokeAsync(string in0) {
            this.entCertRevokeAsync(in0, null);
        }
        
        /// <remarks/>
        public void entCertRevokeAsync(string in0, object userState) {
            if ((this.entCertRevokeOperationCompleted == null)) {
                this.entCertRevokeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentCertRevokeOperationCompleted);
            }
            this.InvokeAsync("entCertRevoke", new object[] {
                        in0}, this.entCertRevokeOperationCompleted, userState);
        }
        
        private void OnentCertRevokeOperationCompleted(object arg) {
            if ((this.entCertRevokeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entCertRevokeCompleted(this, new entCertRevokeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string operatorCertRequest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("operatorCertRequest", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void operatorCertRequestAsync(string in0) {
            this.operatorCertRequestAsync(in0, null);
        }
        
        /// <remarks/>
        public void operatorCertRequestAsync(string in0, object userState) {
            if ((this.operatorCertRequestOperationCompleted == null)) {
                this.operatorCertRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnoperatorCertRequestOperationCompleted);
            }
            this.InvokeAsync("operatorCertRequest", new object[] {
                        in0}, this.operatorCertRequestOperationCompleted, userState);
        }
        
        private void OnoperatorCertRequestOperationCompleted(object arg) {
            if ((this.operatorCertRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.operatorCertRequestCompleted(this, new operatorCertRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string entCertUpdateAndDown([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("entCertUpdateAndDown", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entCertUpdateAndDownAsync(string in0) {
            this.entCertUpdateAndDownAsync(in0, null);
        }
        
        /// <remarks/>
        public void entCertUpdateAndDownAsync(string in0, object userState) {
            if ((this.entCertUpdateAndDownOperationCompleted == null)) {
                this.entCertUpdateAndDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentCertUpdateAndDownOperationCompleted);
            }
            this.InvokeAsync("entCertUpdateAndDown", new object[] {
                        in0}, this.entCertUpdateAndDownOperationCompleted, userState);
        }
        
        private void OnentCertUpdateAndDownOperationCompleted(object arg) {
            if ((this.entCertUpdateAndDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entCertUpdateAndDownCompleted(this, new entCertUpdateAndDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string perCertQuery([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("perCertQuery", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void perCertQueryAsync(string in0) {
            this.perCertQueryAsync(in0, null);
        }
        
        /// <remarks/>
        public void perCertQueryAsync(string in0, object userState) {
            if ((this.perCertQueryOperationCompleted == null)) {
                this.perCertQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnperCertQueryOperationCompleted);
            }
            this.InvokeAsync("perCertQuery", new object[] {
                        in0}, this.perCertQueryOperationCompleted, userState);
        }
        
        private void OnperCertQueryOperationCompleted(object arg) {
            if ((this.perCertQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.perCertQueryCompleted(this, new perCertQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string entCertUnfreeze([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("entCertUnfreeze", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entCertUnfreezeAsync(string in0) {
            this.entCertUnfreezeAsync(in0, null);
        }
        
        /// <remarks/>
        public void entCertUnfreezeAsync(string in0, object userState) {
            if ((this.entCertUnfreezeOperationCompleted == null)) {
                this.entCertUnfreezeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentCertUnfreezeOperationCompleted);
            }
            this.InvokeAsync("entCertUnfreeze", new object[] {
                        in0}, this.entCertUnfreezeOperationCompleted, userState);
        }
        
        private void OnentCertUnfreezeOperationCompleted(object arg) {
            if ((this.entCertUnfreezeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entCertUnfreezeCompleted(this, new entCertUnfreezeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string perCertRequestAndDown([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("perCertRequestAndDown", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void perCertRequestAndDownAsync(string in0) {
            this.perCertRequestAndDownAsync(in0, null);
        }
        
        /// <remarks/>
        public void perCertRequestAndDownAsync(string in0, object userState) {
            if ((this.perCertRequestAndDownOperationCompleted == null)) {
                this.perCertRequestAndDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnperCertRequestAndDownOperationCompleted);
            }
            this.InvokeAsync("perCertRequestAndDown", new object[] {
                        in0}, this.perCertRequestAndDownOperationCompleted, userState);
        }
        
        private void OnperCertRequestAndDownOperationCompleted(object arg) {
            if ((this.perCertRequestAndDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.perCertRequestAndDownCompleted(this, new perCertRequestAndDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string entCertQuery([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("entCertQuery", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void entCertQueryAsync(string in0) {
            this.entCertQueryAsync(in0, null);
        }
        
        /// <remarks/>
        public void entCertQueryAsync(string in0, object userState) {
            if ((this.entCertQueryOperationCompleted == null)) {
                this.entCertQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnentCertQueryOperationCompleted);
            }
            this.InvokeAsync("entCertQuery", new object[] {
                        in0}, this.entCertQueryOperationCompleted, userState);
        }
        
        private void OnentCertQueryOperationCompleted(object arg) {
            if ((this.entCertQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.entCertQueryCompleted(this, new entCertQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.infosec.com.cn", ResponseNamespace="http://webservice.infosec.com.cn", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string perCertRevoke([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("perCertRevoke", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void perCertRevokeAsync(string in0) {
            this.perCertRevokeAsync(in0, null);
        }
        
        /// <remarks/>
        public void perCertRevokeAsync(string in0, object userState) {
            if ((this.perCertRevokeOperationCompleted == null)) {
                this.perCertRevokeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnperCertRevokeOperationCompleted);
            }
            this.InvokeAsync("perCertRevoke", new object[] {
                        in0}, this.perCertRevokeOperationCompleted, userState);
        }
        
        private void OnperCertRevokeOperationCompleted(object arg) {
            if ((this.perCertRevokeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.perCertRevokeCompleted(this, new perCertRevokeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void perCertRequestCompletedEventHandler(object sender, perCertRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class perCertRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal perCertRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void operatorCertRevokeCompletedEventHandler(object sender, operatorCertRevokeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class operatorCertRevokeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal operatorCertRevokeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void entCertReplaceCompletedEventHandler(object sender, entCertReplaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entCertReplaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entCertReplaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void operatorCertFreezeCompletedEventHandler(object sender, operatorCertFreezeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class operatorCertFreezeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal operatorCertFreezeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void entCertRequestCompletedEventHandler(object sender, entCertRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entCertRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entCertRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void operatorCertUpdateAndDownCompletedEventHandler(object sender, operatorCertUpdateAndDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class operatorCertUpdateAndDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal operatorCertUpdateAndDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void entCertUpdateCompletedEventHandler(object sender, entCertUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entCertUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entCertUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void operatorCertRequestAndDownCompletedEventHandler(object sender, operatorCertRequestAndDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class operatorCertRequestAndDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal operatorCertRequestAndDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void operatorCertUnfreezeCompletedEventHandler(object sender, operatorCertUnfreezeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class operatorCertUnfreezeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal operatorCertUnfreezeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void entCertFreezeCompletedEventHandler(object sender, entCertFreezeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entCertFreezeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entCertFreezeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void perCertUpdateCompletedEventHandler(object sender, perCertUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class perCertUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal perCertUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void perCertUpdateAndDownCompletedEventHandler(object sender, perCertUpdateAndDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class perCertUpdateAndDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal perCertUpdateAndDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void operatorCertQueryCompletedEventHandler(object sender, operatorCertQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class operatorCertQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal operatorCertQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void entCertReplaceAndDownCompletedEventHandler(object sender, entCertReplaceAndDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entCertReplaceAndDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entCertReplaceAndDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void perCertReplaceCompletedEventHandler(object sender, perCertReplaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class perCertReplaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal perCertReplaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void entCertRequestAndDownCompletedEventHandler(object sender, entCertRequestAndDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entCertRequestAndDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entCertRequestAndDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void perCertUnfreezeCompletedEventHandler(object sender, perCertUnfreezeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class perCertUnfreezeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal perCertUnfreezeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void operatorCertUpdateCompletedEventHandler(object sender, operatorCertUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class operatorCertUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal operatorCertUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void perCertFreezeCompletedEventHandler(object sender, perCertFreezeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class perCertFreezeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal perCertFreezeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void perCertReplaceAndDownCompletedEventHandler(object sender, perCertReplaceAndDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class perCertReplaceAndDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal perCertReplaceAndDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void operatorCertReplaceCompletedEventHandler(object sender, operatorCertReplaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class operatorCertReplaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal operatorCertReplaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void operatorCertReplaceAndDownCompletedEventHandler(object sender, operatorCertReplaceAndDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class operatorCertReplaceAndDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal operatorCertReplaceAndDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void downloadCertCompletedEventHandler(object sender, downloadCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void entCertRevokeCompletedEventHandler(object sender, entCertRevokeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entCertRevokeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entCertRevokeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void operatorCertRequestCompletedEventHandler(object sender, operatorCertRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class operatorCertRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal operatorCertRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void entCertUpdateAndDownCompletedEventHandler(object sender, entCertUpdateAndDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entCertUpdateAndDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entCertUpdateAndDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void perCertQueryCompletedEventHandler(object sender, perCertQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class perCertQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal perCertQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void entCertUnfreezeCompletedEventHandler(object sender, entCertUnfreezeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entCertUnfreezeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entCertUnfreezeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void perCertRequestAndDownCompletedEventHandler(object sender, perCertRequestAndDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class perCertRequestAndDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal perCertRequestAndDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void entCertQueryCompletedEventHandler(object sender, entCertQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class entCertQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal entCertQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void perCertRevokeCompletedEventHandler(object sender, perCertRevokeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class perCertRevokeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal perCertRevokeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591